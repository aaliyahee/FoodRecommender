# -*- coding: utf-8 -*-
"""small_keras_Resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14sopcreD6tYC0ZyTb3dgmNlLlHQJx_Lj
"""

from __future__ import absolute_import, division, print_function

import matplotlib.pylab as plt
import numpy as np

import tensorflow as tf
import tensorflow_hub as hub

from tensorflow.keras import layers

from google.colab import drive
import os

if os.path.exists('/content/gdrive/')== False:
  drive.mount('/content/gdrive/')
  print('Google drive is mounted\n')
else:
  print('Google drive is already mounted\n')

"""- 참고 자료
- tensorflow hub example 
https://www.tensorflow.org/tutorials/images/hub_with_keras
- 내 이미지를 이용하여 딥러닝
http://www.birc.co.kr/2018/02/26/%EC%8B%A4%EC%A0%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-cnn-%EB%AA%A8%EB%8D%B8-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/
- 10-CIFAR
http://blog.naver.com/PostView.nhn?blogId=cenodim&logNo=220946688251
"""

#data path
path = '/content/gdrive/My Drive/food small data/food_img/'

"""[1] 데이터 전처리 + [0, 1] 범위 내에서\
[2] 경로에서 데이터 불러오고 [1] 적용
"""

image_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255)
image_data = image_generator.flow_from_directory(str(path))

for image_batch,label_batch in image_data:
  print("Image batch shape: ", image_batch.shape)
  print("Labe batch shape: ", label_batch.shape)
  break

"""- 구글 텐서 케라스 허브에 pre_trained가 된 여러 종류의 모델이 존재
  - ex) image net으로 학습된 mobilenet\
  - cifar-10으로 학습된 inception v3 등등
- 모델에 해당하는 tensorflow hub링크를 통해 사용 가능함.
"""

feature_extractor_url = "https://tfhub.dev/google/imagenet/resnet_v2_50/classification/3"

def feature_extractor(x):
  feature_extractor_module = hub.Module(feature_extractor_url)
  return feature_extractor_module(x)

IMAGE_SIZE = hub.get_expected_image_size(hub.Module(feature_extractor_url))

image_data = image_generator.flow_from_directory(str(path), target_size=IMAGE_SIZE)
for image_batch,label_batch in image_data:
  print("Image batch shape: ", image_batch.shape)
  print("Labe batch shape: ", label_batch.shape)
  break

features_extractor_layer = layers.Lambda(feature_extractor, input_shape=IMAGE_SIZE+[3])

model = tf.keras.Sequential([
  features_extractor_layer,
  layers.Dense(image_data.num_classes, activation='softmax')
])
model.summary()

import tensorflow.keras.backend as K
sess = K.get_session()
init = tf.global_variables_initializer()
sess.run(init)

result = model.predict(image_batch)
result.shape

model.compile(
  optimizer=tf.train.AdamOptimizer(), 
  loss='categorical_crossentropy',
  metrics=['accuracy'])

class CollectBatchStats(tf.keras.callbacks.Callback):
  def __init__(self):
    self.batch_losses = []
    self.batch_acc = []
    
  def on_batch_end(self, batch, logs=None):
    self.batch_losses.append(logs['loss'])
    self.batch_acc.append(logs['acc'])

steps_per_epoch = image_data.samples//image_data.batch_size
batch_stats = CollectBatchStats()
model.fit((item for item in image_data), epochs=1, 
                    steps_per_epoch=steps_per_epoch,
                    callbacks = [batch_stats])

plt.figure()
plt.ylabel("Loss")
plt.xlabel("Training Steps")
plt.ylim([0,2])
plt.plot(batch_stats.batch_losses)

plt.figure()
plt.ylabel("Accuracy")
plt.xlabel("Training Steps")
plt.ylim([0,1])
plt.plot(batch_stats.batch_acc)

label_names = sorted(image_data.class_indices.items(), key=lambda pair:pair[1])
label_names = np.array([key.title() for key, value in label_names])
label_names

result_batch = model.predict(image_batch)

labels_batch = label_names[np.argmax(result_batch, axis=-1)]
labels_batch

plt.figure(figsize=(10,9))
for n in range(30):
  plt.subplot(6,5,n+1)
  plt.imshow(image_batch[n])
  name = labels_batch[n]
  print(name)
  plt.title(name)
  plt.axis('off')
_ = plt.suptitle("Model predictions")

"""export_path = tf.contrib.saved_model.save_keras_model(model, "./saved_models")
export_path
"""

export_path = tf.contrib.saved_model.save_keras_model(model, "./content/gdrive/My Drive/Colab Notebooks/saved_models")
export_path